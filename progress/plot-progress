#!/usr/bin/env python3

import pickle
import subprocess

import matplotlib.pyplot as plt
import pandas as pd


textiny = 8.0
texsmall = 9.25
texnormal = 10.0

plt.rcdefaults()
plt.rcParams.update({
    'font.family': 'serif',
    'font.serif': ['CMU Serif'],
    'font.size': texsmall,
    'legend.fontsize': texsmall,
    'axes.labelsize': texsmall,
    'axes.titlesize': texsmall,
    'xtick.labelsize': textiny,
    'ytick.labelsize': textiny,
    'font.weight': 400,
    'axes.labelweight': 400,
    'axes.titleweight': 400,
    'lines.linewidth': .9,
    'lines.markersize': 3,
    'lines.markeredgewidth': .1,
    'patch.linewidth': .9,
    'axes.linewidth': .5,
    'xtick.major.width': .5,
    'ytick.major.width': .5,
    'xtick.minor.width': .5,
    'ytick.minor.width': .5,
    'xtick.major.size': 2,
    'ytick.major.size': 2,
    'xtick.minor.size': 1.3,
    'ytick.minor.size': 1.3,
    'xtick.major.pad': 1.8,
    'ytick.major.pad': 1.8,
    'text.color': 'black',
    'axes.edgecolor': 'black',
    'axes.labelcolor': 'black',
    'xtick.color': 'black',
    'ytick.color': 'black',
    'legend.numpoints': 1,
    'legend.scatterpoints': 1,
    'legend.frameon': False,
    'image.interpolation': 'none',
    'pdf.fonttype': 42,
})


def current_progress():
    """
    Record current pages written.

    """
    proc = subprocess.run(
        ['pdfinfo', '../build/dissertation.pdf'],
        check=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        universal_newlines=True
    )

    for line in proc.stdout.splitlines():
        if line.startswith('Pages'):
            label, value = line.split()
            pages = int(value)

    try:
        pagecount = pickle.load(open('pagecount.p', 'rb'))
    except FileNotFoundError:
        pagecount = set()

    pagecount.add((pd.to_datetime('today'), pages))

    with open('pagecount.p', 'wb') as f:
        pickle.dump(pagecount, f)

    return zip(*list(pagecount))


def main():
    """
    Track thesis writing progress.

    """
    # important dates
    start = pd.Timestamp('8/01/2018')
    thesis_deadline = pd.Timestamp('11/5/2018')
    defense_deadline = pd.Timestamp('11/19/2018')
    end = pd.Timestamp('11/30/2018')

    # wide aspect figure
    fig = plt.figure(figsize=(4, 2))

    # ideal writing progress
    rate = 1.4
    datelist = pd.date_range(start, thesis_deadline)
    ideal_progress = rate*(datelist - start).days
    plt.plot(datelist, ideal_progress, color='.8')

    # actual writing progress
    dates, pages = current_progress()
    plt.plot(dates, pages, 'o')

    # important deadlines
    plt.axvline(thesis_deadline, linestyle='dashed')
    plt.axvline(defense_deadline)

    # axes labels
    plt.xlim(start, end)
    plt.ylim(0, 150)
    plt.xlabel('Date')
    plt.ylabel('Pages written')
    plt.tight_layout(pad=0)

    # despine axes
    for ax in fig.axes:
        ax.xaxis.set_ticks_position('bottom')
        ax.yaxis.set_ticks_position('left')
        for spine in 'top', 'right':
            ax.spines[spine].set_visible(False)

    plt.gcf().autofmt_xdate()
    plt.savefig('progress.png', dpi=200)


if __name__ == "__main__":
    main()
